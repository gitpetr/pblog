%h1 Введение в Rspec
%p Добавим джемы:
%pre
  :preserve

    group :development, :test do
      gem 'rspec-rails', '~> 3.6'
      gem 'factory_girl_rails'
    end
%p
  %q
    %u $ rails g rspec:install
%p
  Спецификация RSpec обычно генерируется вместе с другими компонентами приложения.
  Например, рельсы, генерирующие модель, также будут генерировать спецификационный файл RSpec
  для модели. Если же модель сгенерировали до установки Rspec, то можно отдельно сгенерировать
  файлы для тестов:
%p
  %q
    %u $ rails generate rspec:model widget
%p Что создаст новый файл:  spec/models/widget_spec.rb.
%p Та же модель генератора доступна для всех спецификаций:
%pre
  :preserve

    scaffold
    model
    controller
    helper
    view
    mailer
    observer
    integration
    feature
    job

%p
  %h3 Простые тесты валидации модели
%p
  %pre
    :preserve
      require 'rails_helper'

      RSpec.describe Counterparty, type: :model do
        it 'validates presence of groups_counterparty_id not valid without name' do
          expect(Counterparty.new(groups_counterparty_id: 1)).to_not be_valid
        end

        it 'validates presence of name not valid without groups_counterparty_id' do
          expect(Counterparty.new(name: '1')).to_not be_valid
        end

        it 'vailidates presence of true' do
          gc = GroupsCounterparty.create(name: 'qqq')
          expect(Counterparty.new(name: 'onename', groups_counterparty_id: gc.id)).to be_valid
        end

      end
%p
  %pre
    :preserve
      $ rspec spec/models/counterparty_spec.rb

      Counterparty
        validates presence of groups_counterparty_id not valid without name
        validates presence of name not valid without groups_counterparty_id
        vailidates presence of true

      Finished in 0.06926 seconds (files took 2.67 seconds to load)
      3 examples, 0 failures

%h3.bottom0 Тестирование контроллеров
%em (для лучшего понимания процесса)

%p добавляем джем: gem 'rails-controller-testing'
чтобы не генерировались лишние тесты добавляем конфигурацию в config/application.rb
%pre
  :preserve

    config.generators do |g|
      g.test_framework :rspec,
                      fixtures: true,
                      view_spec: false,
                      helper_specs: false,
                      routing_specs: false,
                      request_specs: false,
                      controller_spec: true
      g.fixture_replacement :factory_girl, dir: 'spec/factories'
    end


%p
  Добавить в rails_helper.rb
  %u config.include FactoryGirl::Syntax::Methods
%p
  Добавим хелперы тестов от devise в rails_helper.rb
  %u config.include Devise::TestHelpers, type: :controller
%p
  для методов требующих регистрации:
  %br
  mkdir spec/support
  %br
  touch spec/support/controller_macros.rb
  %pre
    :preserve
      module ControllerMacros
        def login_user
          before do
            @user = create(:user)
            @request.env['devise.mapping'] = Devise.mappings[:user]
            sign_in @user
          end
        end
      end
  в rails_helper.rb раскомментарить
  %u Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f } # где-то стр. 23
  %br
  и добавить строку
  %br
  %u config.extend ControllerMacros, type: :controller

%p
  spec/factory/users.rb
  %pre
    :preserve
      FactoryGirl.define do
        sequence :email do |n|
          "user\#{n}@test.com"
        end

        sequence :username do |n|
          "myusername\#{n}"
        end

        factory :user do
          username
          email
          password '123456'
          password_confirmation '123456'
        end
      end
%p Если не был сгенерирован файл тестов, то генерируем:
%q
  %u $ rails generate rspec:controller goods

%p
  дописываем сюда spec/factories/goods.rb до такого:
  %pre
    :preserve
      FactoryGirl.define do
        factory :good do
          name 'Myname'
          comment 'Mycomment'
        end

        factory :invalid_good, class: "Good" do
          name nil
          comment nil
        end
      end
%p
  вот полное содержание с уже написанным тестом в сгенерированном файле:
  %pre
    :preserve
      require 'rails_helper'

      RSpec.describe GoodsController, type: :controller do

        describe 'Get #index' do
          let(:goods) { create_list(:good, 2) } # FactoryGirl создает массив из 2 переменных

          before do
            get :index
          end

          it 'array of all qoods' do
            expect(assigns(:goods)).to match_array(@goods) # assigns - вспомогательный метод, вернет значение переданной ему переменной
          end

          it 'renders index view' do
            expect(response).to render_template :index
          end
        end

        describe 'Get #show' do
          let(:good) { create(:good) }

          it 'assigns the requested good to @good' do
            get :show, params: { id: good }
            expect(assigns(:good)).to eq good
          end

          it 'renders show view' do
            get :show, params: { id: good }
            expect(response).to render_template :show
          end
        end

          describe 'Get #new' do
            login_user
            before { get :new }

            it 'assigns a new Qood to @good' do
              expect(assigns(:good)).to be_a_new(Good)
            end

            it 'renders new view' do
              expect(response).to render_template :new
            end
          end

          describe 'Get #edit' do
            login_user
            before { get :edit, params: { id: good } }

            it 'assigns the requested good to @good' do
              expect(assigns(:good)).to eq good
            end

            it 'renders edit view' do
              expect(response).to render_template :edit
            end
          end

          describe 'POST #create' do
            login_user
            context 'with valid attributes' do
              it 'saves the new good in the database' do
                expect { post :create, params: { good: attributes_for(:good) } }
                  .to change(Good, :count).by(+1)
              end

              it 'redirects to show view' do
                post :create, params: { good: attributes_for(:good) }
                # expect(response).to redirect_to good_path(assigns(:good)) # Если перенаправление на :show
                expect(response).to redirect_to goods_path
              end
            end

            context 'with invalid attributes' do
              it 'does not save the good' do
                expect { post :create, params: { good: attributes_for(:invalid_good) } }.to_not change(Good, :count)
              end

              it 're-renders new view' do
                post :create, params: { good: attributes_for(:invalid_good) }
                expect(response).to render_template :new
              end
            end
          end

          describe 'PATCH #update' do
            login_user
            context 'valid attributes' do
              it 'assings the requested good to @good' do
                patch :update, params: { id: good, good: attributes_for(:good) }
                expect(assigns(:good)).to eq good
              end

              it 'changes good attributes' do
                patch :update, params: { id: good, good: { name: 'new name', comment: 'new comment' } }
                good.reload
                expect(good.name).to eq 'new name'
                expect(good.comment).to eq 'new comment'
              end

              it 'redirects to the updated good' do
                patch :update, params: { id: good, good: attributes_for(:good) }
                # expect(response).to redirect_to good # eсли перенаправляется на good
                expect(response).to redirect_to goods_path
              end
            end

            context 'invalid attributes' do
              login_user
              before { patch :update, params: { id: good, good: { name: nil, comment: 'new comment' } } }

              it 'does not change good attributes' do
                good.reload
                expect(good.name).to eq 'MyName'
                expect(good.comment).to eq 'MyComment'
              end

              it 're-renders edit view' do
                expect(response).to render_template :edit
              end
            end
          end

          describe 'DELETE #destroy' do
            login_user
            before { good }

            it 'deletes good' do
              expect { delete :destroy, params: { id: good } }.to change(Good, :count).by(-1)
            end

            it 'redirect to index view' do
              delete :destroy, params: { id: good }
              expect(response).to redirect_to goods_path
            end
          end
        end
  %pre
    :preserve

      $ rspec spec/controllers/goods_controller_spec.rb

      GoodsController
        Get #index
          array of all qoods
          renders index view
        Get #show
          assigns the requested good to @good
          renders show view
        Get #new
          assigns a new Qood to @good
          renders new view
        Get #edit
          assigns the requested good to @good
          renders edit view
        POST #create
          with valid attributes
            saves the new good in the database
            redirects to show view
          with invalid attributes
            does not save the good
            re-renders new view
        PATCH #update
          valid attributes
            assings the requested good to @good
            changes good attributes
            redirects to the updated good
          invalid attributes
            does not change good attributes
            re-renders edit view
        DELETE #destroy
          deletes good
          redirect to index view

  = image_tag('test2.png')

